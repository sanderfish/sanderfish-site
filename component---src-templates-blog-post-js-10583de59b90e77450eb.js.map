{"version":3,"sources":["webpack:///./src/components/SEO/SEO.js","webpack:///./src/templates/blog-post.js"],"names":["SEO","description","lang","meta","keywords","title","query","detailsQuery","render","data","metaDescription","site","siteMetadata","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","defaultProps","pageQuery","BlogPostTemplate","pageContext","location","post","markdownRemark","siteTitle","previous","next","Layout","frontmatter","excerpt","dangerouslySetInnerHTML","__html","html","date"],"mappings":"kNAKA,SAASA,EAAT,GAA4D,IAA7CC,EAA4C,EAA5CA,YAAaC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,SAAUC,EAAS,EAATA,MAChD,OACE,kBAAC,cAAD,CACEC,MAAOC,EACPC,OAAQ,SAAAC,GACN,IAAMC,EACJT,GAAeQ,EAAKE,KAAKC,aAAaX,YACxC,OACE,kBAAC,IAAD,CACEY,eAAgB,CACdX,QAEFG,MAAOA,EACPS,cAAa,QAAUL,EAAKE,KAAKC,aAAaP,MAC9CF,KAAM,CACJ,CACEY,KAAK,cACLC,QAASN,GAEX,CACEO,SAAS,WACTD,QAASX,GAEX,CACEY,SAAS,iBACTD,QAASN,GAEX,CACEO,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASP,EAAKE,KAAKC,aAAaM,QAElC,CACEH,KAAK,gBACLC,QAASX,GAEX,CACEU,KAAK,sBACLC,QAASN,IAGVS,OACCf,EAASgB,OAAS,EACd,CACEL,KAAK,WACLC,QAASZ,EAASiB,KAAT,OAEX,IAELF,OAAOhB,QAQtBH,EAAIsB,aAAe,CACjBpB,KAAK,KACLC,KAAM,GACNC,SAAU,IAWGJ,QAETO,EAAY,aCxDLgB,GAFEC,UArBU,SAAC,GAAqC,IAAnCf,EAAkC,EAAlCA,KAAMgB,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SACvCC,EAAOlB,EAAKmB,eACZC,EAAYpB,EAAKE,KAAKC,aAAaP,MACdoB,EAAnBK,SAAmBL,EAATM,KAElB,OACE,kBAACC,EAAA,EAAD,CAAQN,SAAUA,EAAUrB,MAAOwB,GACjC,kBAAC,EAAD,CAAKxB,MAAOsB,EAAKM,YAAY5B,MAAOJ,YAAa0B,EAAKO,UACtD,4BAAKP,EAAKM,YAAY5B,OAEtB,yBAAK8B,wBAAyB,CAAEC,OAAQT,EAAKU,QAE7C,6BAEA,2CAAiBV,EAAKM,YAAYK,MAElC,+BAOgB","file":"component---src-templates-blog-post-js-10583de59b90e77450eb.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { StaticQuery, graphql } from 'gatsby';\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={data => {\n        const metaDescription =\n          description || data.site.siteMetadata.description;\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang,\n            }}\n            title={title}\n            titleTemplate={`%s | ${data.site.siteMetadata.title}`}\n            meta={[\n              {\n                name: `description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:title`,\n                content: title,\n              },\n              {\n                property: `og:description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:type`,\n                content: `website`,\n              },\n              {\n                name: `twitter:card`,\n                content: `summary`,\n              },\n              {\n                name: `twitter:creator`,\n                content: data.site.siteMetadata.author,\n              },\n              {\n                name: `twitter:title`,\n                content: title,\n              },\n              {\n                name: `twitter:description`,\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                keywords.length > 0\n                  ? {\n                      name: `keywords`,\n                      content: keywords.join(`, `),\n                    }\n                  : [],\n              )\n              .concat(meta)}\n          />\n        );\n      }}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport { Link, graphql } from 'gatsby';\n\nimport Layout from '../components/Layout';\nimport SEO from '../components/SEO';\n\nconst BlogPostTemplate = ({ data, pageContext, location }) => {\n  const post = data.markdownRemark;\n  const siteTitle = data.site.siteMetadata.title;\n  const { previous, next } = pageContext;\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title={post.frontmatter.title} description={post.excerpt} />\n      <h1>{post.frontmatter.title}</h1>\n\n      <div dangerouslySetInnerHTML={{ __html: post.html }} />\n\n      <hr />\n\n      <p>Published on {post.frontmatter.date}</p>\n\n      <hr />\n    </Layout>\n  );\n};\n\nexport default BlogPostTemplate;\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n        author\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}